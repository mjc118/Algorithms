using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using MySql.Data.MySqlClient;
using System.Diagnostics;

namespace TermProject
{
    //classes for grabbing single Match Details
    //these classes are used by the C# JSON deserialization library to deserialize the JSON returned by the Web API call
    
    public class AdditionalUnits
    {
        public string unitname { get; set; }
        public int item_0 { get; set; }
        public int item_1 { get; set; }
        public int item_2 { get; set; }
        public int item_3 { get; set; }
        public int item_4 { get; set; }
        public int item_5 { get; set; }
    }

    public class AbilityUpgrades
    {
        public int ability { get; set; }
        public Int64 time { get; set; }
        public int level { get; set; }
    }

    public class Players
    {
        public Int64 account_id { get; set; }
        public Int64 player_slot { get; set; }
        public int hero_id { get; set; }
        public int item_0 { get; set; }
        public int item_1 { get; set; }
        public int item_2 { get; set; }
        public int item_3 { get; set; }
        public int item_4 { get; set; }
        public int item_5 { get; set; }
        public int kills { get; set; }
        public int deaths { get; set; }
        public int assists { get; set; }
        public int leaver_status { get; set; }
        public int gold { get; set; }
        public int last_hits { get; set; }
        public int denies { get; set; }
        public int gold_per_min { get; set; }
        public int xp_per_min { get; set; }
        public int gold_spent { get; set; }
        public Int64 hero_damage { get; set; }
        public Int64 tower_damage { get; set; }
        public Int64 hero_healing { get; set; }
        public int level { get; set; }
        //public List<AbilityUpgrades> ability_upgrades { get; set; }
        //public List<AdditionalUnits> additional_units { get; set; }
    }

    public class CaptainsModePickBans
    {
        public bool is_pick { get; set; }
        public int hero_id { get; set; }
        public int team { get; set; }
        public int order { get; set; }
    }

    public class ListOfMatchDetails
    {
        public List<Players> players { get; set; }
        //public Int64 season { get; set; }
        public bool radiant_win { get; set; }
        public Int64 duration { get; set; }
        public Int64 start_time { get; set; }
        public Int64 match_id { get; set; }
        public Int64 match_seq_num { get; set; }
        public int tower_status_radiant { get; set; }
        public int tower_status_dire { get; set; }
        public int barracks_status_radiant { get; set; }
        public int barracks_status_dire { get; set; }
        public int cluster { get; set; }
        public Int64 first_blood_time { get; set; }
        public int lobby_type { get; set; }
        public int human_players { get; set; }
        public int leagueid { get; set; }
        public int positive_votes { get; set; }
        public int negative_votes { get; set; }
        public int game_mode { get; set; }
        public List<CaptainsModePickBans> picks_bans { get; set; }
    }

    public class MatchDetailMatchResults
    {
        public int status { get; set; }
        public List<ListOfMatchDetails> matches { get; set; }
    }

    public class MatchDetailQueryResults
    {
        public MatchDetailMatchResults result { get; set; }
    }

    //end of classes used for Match Details

    class Program
    {
        static void Main()
        {
            Stopwatch sw = new Stopwatch();
            sw.Start();

            RunAsync().Wait();

            sw.Stop();
            Console.WriteLine(sw.Elapsed);
        }

        static async Task RunAsync()
        {
            using (var client = new HttpClient())
            {
                MatchDetailQueryResults DeserializedMatchDetails = new MatchDetailQueryResults();

                //open connection to our locally hosted MySQL database
                MySqlConnection conn = new MySqlConnection("server=localhost;uid=root;pwd=root;database=dota2;");
                conn.Open();

                //get the most recent match sequence id that is in our database
                MySqlCommand cmd = new MySqlCommand("SELECT * FROM matches WHERE RowID = 1", conn);

                MySqlDataReader Reader = null;
                Reader = cmd.ExecuteReader();
                Reader.Read();
                
                string APIkey = "***********************";

                //my domain name used with the API key
                client.BaseAddress = new Uri("https://sites.google.com/site/mjcuakron/");

                //pull 25 matches in the order of the Last Sequence Number we used. (Sequence Numbers are ascending, hence + 1)
                HttpResponseMessage response = await client.GetAsync("https://api.steampowered.com/IDOTA2Match_570/GetMatchHistoryBySequenceNum/V001/?key=" +
                    APIkey + "&start_at_match_seq_num=" + (Reader.GetInt64("matchSeqNum") + 1).ToString());
                
                //close our reader used to get the most recent match so that we can Insert into our Database farther down
                if (Reader != null) { Reader.Close(); }

                if (response.IsSuccessStatusCode)
                {
                    Stream receiveStream = await response.Content.ReadAsStreamAsync();
                    StreamReader readStream = new StreamReader(receiveStream, Encoding.UTF8);
                    string Text = readStream.ReadToEnd();
                    //Console.WriteLine(Text);

                    DeserializedMatchDetails = JsonConvert.DeserializeObject<MatchDetailQueryResults>(Text);
                }
                else
                {
                    Console.WriteLine(response.StatusCode);
                    System.Environment.Exit(1);
                }

                foreach (ListOfMatchDetails match in DeserializedMatchDetails.result.matches)
                {
                    /* 
                     * if the match had 10 human players and it was a game mode I want to record and it lasted > 30 minutes and it is
                     * either a public game or a ranked game, record it.
                     */
                    string MatchHistoryInsert = "INSERT INTO matches (matchID, matchSeqNum, startTime, lobbyType, gameMode, duration) VALUES (@matchID, @matchSeqNum, @startTime, @lobbyType, @gameMode, @duration)";

                    if (match.human_players == 10 && match.game_mode < 6 && match.duration > 1799 && (match.lobby_type == 0 || match.lobby_type == 7))
                    {

                        cmd = new MySqlCommand(MatchHistoryInsert, conn);
                        cmd.Parameters.AddWithValue("@matchID", match.match_id);
                        cmd.Parameters.AddWithValue("@matchSeqNum", match.match_seq_num);
                        cmd.Parameters.AddWithValue("@startTime", match.start_time);
                        cmd.Parameters.AddWithValue("@lobbyType", match.lobby_type);
                        cmd.Parameters.AddWithValue("@gameMode", match.game_mode);
                        cmd.Parameters.AddWithValue("@duration", match.duration / 60);
                        cmd.ExecuteNonQuery();

                        /*
                         * if the radiant won then the first five players should have the heroes they played awarded wins
                         * otherwise the first five players get their heroes awarded losses second group of five players
                         * get the heroes they played awarded wins and vice versa
                         */
                        int PlayerWonStartIndex, PlayerLossStartIndex;
                        if (match.radiant_win)
                        {
                            PlayerWonStartIndex = 0;
                            PlayerLossStartIndex = 5;
                        }
                        else
                        {
                            PlayerWonStartIndex = 5;
                            PlayerLossStartIndex = 0;
                        }

                        string HeroWonDetailsUpdate = @"UPDATE herodetails
                                SET Wins = Wins + 1, Kills = Kills + @Kill, Deaths = Deaths + @Death, Assists = Assists + @Assist, 
                                MatchesPlayed = MatchesPlayed + 1 WHERE heroID = @ID";

                        string HeroLossDetailsUpdate = @"UPDATE herodetails
                                SET Losses = Losses + 1, Kills = Kills + @Kill, Deaths = Deaths + @Death, Assists = Assists + @Assist, 
                                MatchesPlayed = MatchesPlayed + 1 WHERE heroID = @ID";

                        //Query String Increments Wins
                        for (int i = PlayerWonStartIndex; i < PlayerWonStartIndex + 5; ++i)
                        {
                            cmd = new MySqlCommand(HeroWonDetailsUpdate, conn);
                            cmd.Parameters.AddWithValue("@Kill", match.players[i].kills);
                            cmd.Parameters.AddWithValue("@Death", match.players[i].deaths);
                            cmd.Parameters.AddWithValue("@Assist", match.players[i].assists);
                            cmd.Parameters.AddWithValue("@ID", match.players[i].hero_id);
                            cmd.ExecuteNonQuery();
                        }

                        //change the Query String to Increment Losses instead of Wins
                        for (int i = PlayerLossStartIndex; i < PlayerLossStartIndex + 5; ++i)
                        {
                            cmd = new MySqlCommand(HeroLossDetailsUpdate, conn);
                            cmd.Parameters.AddWithValue("@Kill", match.players[i].kills);
                            cmd.Parameters.AddWithValue("@Death", match.players[i].deaths);
                            cmd.Parameters.AddWithValue("@Assist", match.players[i].assists);
                            cmd.Parameters.AddWithValue("@ID", match.players[i].hero_id);
                            cmd.ExecuteNonQuery();
                        }
                    }
                }

                //put the last MatchSeqNum from our query into our database so we can keep track of where to start with our next Web API call
                Int64 LastSeqNum = DeserializedMatchDetails.result.matches[DeserializedMatchDetails.result.matches.Count - 1].match_seq_num;
                string UpdateMatchSeqNum = "UPDATE matches SET matchSeqNum = @LastSeqNum WHERE RowID = 1";
                cmd = new MySqlCommand(UpdateMatchSeqNum, conn);
                cmd.Parameters.AddWithValue("@LastSeqNum", LastSeqNum);
                cmd.ExecuteNonQuery();
                                
                if (conn != null) { conn.Close(); }
            }
        }
    }
}
