#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>//stringstream
#include <cmath>//abs
#include <algorithm>//min

using namespace std;


void ReadImg(char* argv[], vector<vector<int>>& Picture, int& Rows, int& Columns);
void WriteImg(char* argv[], vector<vector<int>>& Picture, int& Rows, int& Columns);
void WeightGrid(vector<vector<int>>& Picture, vector<vector<int>>& Weighted, int& Rows, int& Columns);

//ReWeight our grid after removing a seam, only ReWeighting Nodes we kept track of
//WhichWay = true: means we took a vertical seam, false: means horizontal seam was removed
void ReWeightGrid(vector<vector<int>>& Picture, vector<vector<int>>& Weighted, vector<int>& NodeCoordinates,
	int& Rows, int& Columns, bool WhichWay);

//used for vertical seams
void SumTopDown(vector<vector<int>>& Weighted, vector<vector<int>>& DynamicSums, int& Rows, int& Columns);

//used for horizontal seams
void SumLeftRight(vector<vector<int>>& Weighted, vector<vector<int>>& DynamicSums, int& Rows, int& Columns);

//remove appropriate seam
void RemoveVerticalSeam(vector<vector<int>>& Picture, vector<vector<int>>& Weighted, vector<vector<int>>& DynamicSums, int& Rows, int& Columns);
void RemoveHorizontalSeam(vector<vector<int>>& Picture, vector<vector<int>>& Weighted, vector<vector<int>>& DynamicSums, int& Rows, int& Columns);

int main(int argc, char* argv[]){
	vector<vector<int>> Picture, Weighted, DynamicSums;
	vector<int> NodeCoordinates, emptyVector;
	int Rows, Columns, VerticalSeams, HorizontalSeams;

	if (argc != 4){
		cout << "Incorrect amount of Parameters\n";
		return 0;
	}

	//stoi only supported in C++ 11
	VerticalSeams = stoi(argv[2]);
	HorizontalSeams = stoi(argv[3]);

	ReadImg(argv, Picture, Rows, Columns);
	WeightGrid(Picture, Weighted, Rows, Columns);

	for (int i = 0; i < Rows; ++i){
		DynamicSums.push_back(emptyVector);
		for (int j = 0; j < Columns; ++j){
			DynamicSums[i].push_back(0);
		}
	}

	//loop to handle removing vertical seams
	for (int i = 0; i < VerticalSeams; ++i){
		if (Picture[0].size() < 1){
			cout << "There are not that many Vertical Seams in the Picture!\n";
			break;
		}
		cout << "Vertical Seam:" << i + 1 << endl;

		SumTopDown(Weighted, DynamicSums, Rows, Columns);
		RemoveVerticalSeam(Picture, Weighted, DynamicSums, Rows, Columns);
	}

	//loop to handle removing horizontal seams
	for (int i = 0; i < HorizontalSeams; ++i){
		if (Picture.size() < 1){
			cout << "There are not that many Horizontal Seams in the Picture!\n";
			break;
		}
		cout << "Horizontal Seam:" << i + 1 << endl;

		SumLeftRight(Weighted, DynamicSums, Rows, Columns);
		RemoveHorizontalSeam(Picture, Weighted, DynamicSums, Rows, Columns);
	}

	WriteImg(argv, Picture, Rows, Columns);

	cout << "Image Processing Complete\n";
	//clear does not deallocate the vectors memory, just clears the elements being held
	//by calling the destructor recursively on each of the inner vectors
	Picture.clear();
	Weighted.clear();
	DynamicSums.clear();

	//using an empty vector and swap will deallocate the memory
	//so the "capacity" will go to 0, hence the vector is deallocating it's allotted memory
	vector<vector<int>>().swap(Picture);
	vector<vector<int>>().swap(Weighted);
	vector<vector<int>>().swap(DynamicSums);
	return 0;
}

void ReadImg(char* argv[], vector<vector<int>>& Picture, int& Rows, int& Columns){
	//vector<vector<int>> Picture;
	vector<int> emptyVector;
	ifstream InputFile(argv[1]);
	string line;
	int tempNum, CurrentRow = -1, CurrentCol = 0;

	for (int i = 0; i < 4; ++i){
		getline(InputFile, line);
		if (i == 2){
			stringstream stream(line);
			stream >> Columns;
			stream >> Rows;
		}
	}

	while (getline(InputFile, line)){
		stringstream stream(line);
		while (stream >> tempNum){
			if (CurrentCol == 0){
				Picture.push_back(emptyVector);
				++CurrentRow;
			}
			Picture[CurrentRow].push_back(tempNum);
			CurrentCol = (CurrentCol + 1) % Columns;
		}
	}

	InputFile.close();

	return;
}

void WriteImg(char* argv[], vector<vector<int>>& Picture, int& Rows, int& Columns){
	string Name = argv[1];
	Name.erase(Name.size() - 4);//only supported in C++ 11
	Name += "_processed.pgm";

	ofstream OutPutFile(Name);

	OutPutFile << "P2\n";
	OutPutFile << "#Image Processed by Michael Crabtree\n";
	OutPutFile << to_string(Columns) + " " + to_string(Rows) << endl;
	OutPutFile << "255\n";

	for (int i = 0; i < Rows; ++i){
		for (int j = 0; j < Columns; ++j){
			if (j == Columns - 1)
				OutPutFile << to_string(Picture[i][j]) << endl;
			else
				OutPutFile << to_string(Picture[i][j]) + " ";
		}
	}

	OutPutFile.close();
	return;
}

void WeightGrid(vector<vector<int>>& Picture, vector<vector<int>>& Weighted, int& Rows, int& Columns){

	vector<int> emptyVector;
	int NodeWeight = 0;

	for (int i = 0; i < Rows; ++i){
		Weighted.push_back(emptyVector);
		for (int j = 0; j < Columns; ++j){
			NodeWeight = 0;
			if (i - 1 >= 0){
				NodeWeight += abs(Picture[i][j] - Picture[i - 1][j]);
			}
			if (i + 1 < Rows){
				NodeWeight += abs(Picture[i][j] - Picture[i + 1][j]);
			}
			if (j - 1 >= 0){
				NodeWeight += abs(Picture[i][j] - Picture[i][j - 1]);
			}
			if (j + 1 < Columns){
				NodeWeight += abs(Picture[i][j] - Picture[i][j + 1]);
			}

			Weighted[i].push_back(NodeWeight);
		}
	}
	return;
}

void ReWeightGrid(vector<vector<int>>& Picture, vector<vector<int>>& Weighted, vector<int>& NodeCoordinates,
	int& Rows, int& Columns, bool WhichWay){

	int CurrentRow = Rows - 1;//for vertical seam reweighting
	int CurrentCol = Columns - 1;//for horizonatl seam reweighting
	int Pos1, Pos2;//holds our two nodes that need reweighted for that row/column
	int NodeWeight = 0;

	//nodes from a vertical seam need reweighted
	if (WhichWay){
		for (int i = 0; i < Rows; ++i){
			Pos1 = NodeCoordinates[i * 2];//indice that shifted left
			Pos2 = NodeCoordinates[(i * 2) + 1];//indice to left of one removed

			if (Pos1 < Columns){
				NodeWeight = 0;
				if (CurrentRow - 1 >= 0){
					NodeWeight += abs(Picture[CurrentRow][Pos1] - Picture[CurrentRow - 1][Pos1]);
				}
				if (CurrentRow + 1 < Rows){
					NodeWeight += abs(Picture[CurrentRow][Pos1] - Picture[CurrentRow + 1][Pos1]);
				}
				if (Pos1 - 1 >= 0){
					NodeWeight += abs(Picture[CurrentRow][Pos1] - Picture[CurrentRow][Pos1 - 1]);
				}
				if (Pos1 + 1 < Columns){
					NodeWeight += abs(Picture[CurrentRow][Pos1] - Picture[CurrentRow][Pos1 + 1]);
				}
				Weighted[CurrentRow][Pos1] = NodeWeight;
			}

			if (Pos2 >= 0){
				NodeWeight = 0;
				if (CurrentRow - 1 >= 0){
					NodeWeight += abs(Picture[CurrentRow][Pos2] - Picture[CurrentRow - 1][Pos2]);
				}
				if (CurrentRow + 1 < Rows){
					NodeWeight += abs(Picture[CurrentRow][Pos2] - Picture[CurrentRow + 1][Pos2]);
				}
				if (Pos2 - 1 >= 0){
					NodeWeight += abs(Picture[CurrentRow][Pos2] - Picture[CurrentRow][Pos2 - 1]);
				}
				if (Pos2 + 1 < Columns){
					NodeWeight += abs(Picture[CurrentRow][Pos2] - Picture[CurrentRow][Pos2 + 1]);
				}
				Weighted[CurrentRow][Pos2] = NodeWeight;
			}

			//traverse upwards
			--CurrentRow;
		}
	}
	else{
		for (int j = 0; j < Columns; ++j){
			Pos1 = NodeCoordinates[j * 2];//indice below us that will shift up
			Pos2 = NodeCoordinates[(j * 2) + 1];//indice above us

			if (Pos1 < Rows){
				NodeWeight = 0;
				if (Pos1 - 1 >= 0){
					NodeWeight += abs(Picture[Pos1][CurrentCol] - Picture[Pos1 - 1][CurrentCol]);
				}
				if (Pos1 + 1 < Rows){
					NodeWeight += abs(Picture[Pos1][CurrentCol] - Picture[Pos1 + 1][CurrentCol]);
				}
				if (CurrentCol - 1 >= 0){
					NodeWeight += abs(Picture[Pos1][CurrentCol] - Picture[Pos1][CurrentCol - 1]);
				}
				if (CurrentCol + 1 < Columns){
					NodeWeight += abs(Picture[Pos1][CurrentCol] - Picture[Pos1][CurrentCol + 1]);
				}
				Weighted[Pos1][CurrentCol] = NodeWeight;
			}

			if (Pos2 >= 0){
				NodeWeight = 0;
				if (Pos2 - 1 >= 0){
					NodeWeight += abs(Picture[Pos2][CurrentCol] - Picture[Pos2 - 1][CurrentCol]);
				}
				if (Pos2 + 1 < Rows){
					NodeWeight += abs(Picture[Pos2][CurrentCol] - Picture[Pos2 + 1][CurrentCol]);
				}
				if (CurrentCol - 1 >= 0){
					NodeWeight += abs(Picture[Pos2][CurrentCol] - Picture[Pos2][CurrentCol - 1]);
				}
				if (CurrentCol + 1 < Columns){
					NodeWeight += abs(Picture[Pos2][CurrentCol] - Picture[Pos2][CurrentCol + 1]);
				}
				Weighted[Pos2][CurrentCol] = NodeWeight;
			}
			//traverse to the left
			--CurrentCol;
		}
	}

	NodeCoordinates.clear();
	return;
}

void SumTopDown(vector<vector<int>>& Weighted, vector<vector<int>>& DynamicSums, int& Rows, int& Columns){
	vector<int> emptyVector;
	int CurrentMin = -1;

	//push back our initial row
	for (int i = 0; i < Columns; ++i){
		DynamicSums[0][i] = Weighted[0][i];
	}

	for (int i = 1; i < Rows; ++i){
		for (int j = 0; j < Columns; ++j){
			CurrentMin = -1;

			if (j - 1 >= 0){//check if we can go up and left
				CurrentMin = Weighted[i][j] + DynamicSums[i - 1][j - 1];
			}

			if (CurrentMin == -1){//case where you are on left wall of grid
				CurrentMin = Weighted[i][j] + DynamicSums[i - 1][j];
			}
			else{
				CurrentMin = min(CurrentMin, Weighted[i][j] + DynamicSums[i - 1][j]);
			}

			if (j + 1 < Columns){//check if we can go up and right
				CurrentMin = min(CurrentMin, Weighted[i][j] + DynamicSums[i - 1][j + 1]);
			}

			DynamicSums[i][j] = CurrentMin;
		}
	}

	return;
}

void SumLeftRight(vector<vector<int>>& Weighted, vector<vector<int>>& DynamicSums, int& Rows, int& Columns){
	vector<int> emptyVector;
	int CurrentMin = -1;

	//push our initial left column onto our 2d vector
	for (int i = 0; i < Rows; ++i){
		DynamicSums[i][0] = Weighted[i][0];
	}

	for (int j = 1; j < Columns; ++j){
		for (int i = 0; i < Rows; ++i){
			CurrentMin = -1;

			if (i - 1 >= 0){//check if we can go left and up
				CurrentMin = Weighted[i][j] + DynamicSums[i - 1][j - 1];
			}

			if (CurrentMin == -1){//case that we are on the top row
				CurrentMin = Weighted[i][j] + DynamicSums[i][j - 1];
			}
			else{
				CurrentMin = min(CurrentMin, Weighted[i][j] + DynamicSums[i][j - 1]);
			}

			if (i + 1 < Rows){//check if we can go left and down
				CurrentMin = min(CurrentMin, Weighted[i][j] + DynamicSums[i + 1][j - 1]);
			}

			DynamicSums[i][j] = CurrentMin;
		}
	}

	return;
}

void RemoveVerticalSeam(vector<vector<int>>& Picture, vector<vector<int>>& Weighted, vector<vector<int>>& DynamicSums, int& Rows, int& Columns){

	vector<int> NodeCoordinates;
	int NodePos;//Position of Node being removed
	int Minimum;//Keeps track of minimum
	int RightDiagonal;//needed for calculating how to reach right diagonal
	bool TookLeft, TookUp;//needed to calculate NodePos 
	//initial condition
	Minimum = DynamicSums[Rows - 1][0];
	NodePos = 0;

	//find our initial starting position
	for (int i = 1; i < Columns; ++i){
		if (DynamicSums[Rows - 1][i] < Minimum){
			Minimum = DynamicSums[Rows - 1][i];
			NodePos = i;
		}
	}

	//keep track of what we will have to re-weight later on our energy grid
	NodeCoordinates.push_back(NodePos);//indice to our right will shift ontop of us
	NodeCoordinates.push_back(NodePos - 1);//indice to our left

	//delete the node, since we are removing the seam
	Picture[Rows - 1].erase(Picture[Rows - 1].begin() + NodePos);
	Weighted[Rows - 1].erase(Weighted[Rows - 1].begin() + NodePos);

	for (int i = Rows - 2; i >= 0; --i){
		//set our initial
		TookLeft = TookUp = false;
		Minimum = -1;

		if (NodePos - 1 >= 0){
			--NodePos;
			Minimum = DynamicSums[i][NodePos];
			TookLeft = true;
		}

		if (Minimum == -1){//left wall of grid
			Minimum = DynamicSums[i][NodePos];
		}
		else if (DynamicSums[i][NodePos + 1] < Minimum){
			++NodePos;
			Minimum = DynamicSums[i][NodePos];
			TookUp = true;
		}

		//calculating how far right we need to shift to get right diagonal indice
		//this is based on where the current minimum's location is
		if (TookLeft && !TookUp)
			RightDiagonal = NodePos + 2;
		else
			RightDiagonal = NodePos + 1;


		if (RightDiagonal < Columns){//right wall of grid
			if (DynamicSums[i][RightDiagonal] < Minimum){
				NodePos = RightDiagonal;
			}
		}

		NodeCoordinates.push_back(NodePos);//indice to our right will shift ontop of us
		NodeCoordinates.push_back(NodePos - 1);//indice to our left

		//erase our seam as we go
		Picture[i].erase(Picture[i].begin() + NodePos);
		Weighted[i].erase(Weighted[i].begin() + NodePos);
	}

	//decrement columns since we removed an indice on every row
	--Columns;
	ReWeightGrid(Picture, Weighted, NodeCoordinates, Rows, Columns, true);

	return;
}

void RemoveHorizontalSeam(vector<vector<int>>& Picture, vector<vector<int>>& Weighted, vector<vector<int>>& DynamicSums, int& Rows, int& Columns){

	vector<int> NodeCoordinates;
	int NodePos;//Position of Node being removed
	int Minimum;//Keeps track of minimum
	int BotRightDiagonal;//needed for calculating how to reach right diagonal
	bool TookTopRight, TookRight;//needed to calculate NodePos 

	//initial condition
	Minimum = DynamicSums[0][Columns - 1];
	NodePos = 0;

	//find our initial starting position
	for (int i = 1; i < Rows; ++i){
		if (DynamicSums[i][Columns - 1] < Minimum){
			Minimum = DynamicSums[i][Columns - 1];
			NodePos = i;
		}
	}

	//keep track of what we will have to re-weight later on our energy grid
	NodeCoordinates.push_back(NodePos);//indice below us that will shift up
	NodeCoordinates.push_back(NodePos - 1);//indice above us

	//shifting the entire column up, which simulates deleting the node
	//we will delete our bottom row off our 2d vector after all columns have been handled
	for (int i = NodePos; i < Rows - 1; ++i){
		Picture[i][Columns - 1] = Picture[i + 1][Columns - 1];
		Weighted[i][Columns - 1] = Weighted[i + 1][Columns - 1];
	}

	for (int j = Columns - 2; j >= 0; --j){
		Minimum = -1;
		TookTopRight = TookRight = false;

		if (NodePos - 1 >= 0){//check if we are on top row
			--NodePos;
			Minimum = DynamicSums[NodePos][j];
			TookTopRight = true;
		}

		if (Minimum == -1){
			Minimum = DynamicSums[NodePos][j];
		}
		else if (DynamicSums[NodePos + 1][j] < Minimum){
			++NodePos;
			Minimum = DynamicSums[NodePos][j];
			TookRight = true;
		}

		//calculating how far down we need to shift to get BotRight diagonal indice
		//this is based on where the current minimum's location is
		if (TookTopRight && !TookRight)
			BotRightDiagonal = NodePos + 2;
		else
			BotRightDiagonal = NodePos + 1;

		if (BotRightDiagonal < Rows){//check if we are on bottom row
			if (DynamicSums[BotRightDiagonal][j] < Minimum){
				NodePos = BotRightDiagonal;
			}
		}

		NodeCoordinates.push_back(NodePos);//indice below us that will shift up
		NodeCoordinates.push_back(NodePos - 1);//indice above us

		//pseudo delete our node that we determined our seam will take
		for (int i = NodePos; i < Rows - 1; ++i){
			Picture[i][j] = Picture[i + 1][j];
			Weighted[i][j] = Weighted[i + 1][j];
		}

	}

	//pop off the last vector in our matrices to delete a row
	//this happens after the nodes below our seam have been shifted upwards appropriately
	Picture.pop_back();
	Weighted.pop_back();

	//decrement rows since we just lost a node in every column
	--Rows;

	ReWeightGrid(Picture, Weighted, NodeCoordinates, Rows, Columns, false);

	return;
}

