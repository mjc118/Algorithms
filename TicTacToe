/*
* File:   ticTacToe.cpp
* Author: Jillian Saurer
* Description : This program allows a human and a computer to play tic tac toe.
*
* Created on 11/6/2014 ; 2:00 pm
*/

#include <iostream>
#include <stdlib.h>
#include <time.h>

using namespace std;

// function prototypes
int computerMove(int[]);
void printBoard(int[]);
bool goodMove();
bool WhoWon(int[]);

int main(){
	int board[9] = { 0 }; // the tic-tac-toe board
	int compMove, humanMove;
	bool isChosen = false;



	cout << "Here are the corresponding numbers to the locations where you can place your X" << endl;
	cout << " 0 | 1 | 2" << endl;
	cout << "---|---|---" << endl;
	cout << " 3 | 4 | 5" << endl;
	cout << "---|---|---" << endl;
	cout << " 6 | 7 | 8" << endl;



	srand(time(0));
	if (rand() % 2 == 0)
	{
		cout << "Computer goes first." << endl;
		board[computerMove(board)] = 2;
		printBoard(board);
	}

	do
	{
		humanMove = -1;//so the human gets to go every time
		while (humanMove < 0 || humanMove > 8 || board[humanMove] == 2){
			cout << "Please pick the location of your X" << endl;
			cin >> humanMove;
			if (humanMove >= 0 && humanMove <= 8 && board[humanMove] != 2 && board[humanMove] != 1)
				board[humanMove] = 1;
			else{
				cout << "INVALID MOVE! Please pick another number between 0 and 8 \n that is not already taken. " << endl;
				humanMove = -1;
			}
		}
		compMove = computerMove(board);

		//check if game is a 'CatsGame'
		if (compMove == 9){
			cout << "Cat's Game!\n";
			printBoard(board);
			break;
		}
		
		board[compMove] = 2;

		printBoard(board);

	} while (WhoWon(board));

	return 0;
}

bool WhoWon(int board[]){
	bool won = false;
	int winningIndice;

	if (board[0] != 0 && board[0] == board[1] && board[0] == board[2]){
		won = true;
		winningIndice = 0;
	}
	else if (board[3] != 0 && board[3] == board[4] && board[3] == board[5]){
		won = true;
		winningIndice = 3;
	}
	else if (board[6] != 0 && board[6] == board[7] && board[6] == board[8]){
		won = true;
		winningIndice = 6;
	}
	else if (board[0] != 0 && board[0] == board[3] && board[0] == board[6]){
		won = true;
		winningIndice = 0;
	}
	else if (board[1] != 0 && board[1] == board[4] && board[1] == board[7]){
		won = true;
		winningIndice = 1;
	}
	else if (board[2] != 0 && board[2] == board[5] && board[2] == board[8]){
		won = true;
		winningIndice = 2;
	}
	else if (board[0] != 0 && board[0] == board[4] && board[0] == board[8]){
		won = true;
		winningIndice = 0;
	}
	else if (board[2] != 0 && board[2] == board[4] && board[2] == board[6]){
		won = true;
		winningIndice = 2;
	}

	if (won){
		if (board[winningIndice] == 1)
			cout << "The Player Won!\n";
		else
			cout << "The Computer Won!\n";

		return false;
	}

	return true;	
}

/*****************************************************************
* Use by computerMove to evaluate prospective tic-tac-toe move. *
* param board 9-element integer array representing game board.  *
* param i, j indices of previously placed board squares.        *
* param k the index of the proposed move.                       *
* return true/false the proposed move is good.                  *
*****************************************************************/
bool goodMove(int board[], int i, int j, int k)
{
	if ((board[i] == board[j]) && (board[i] != 0) && (board[k] == 0))
		return true;
	else return false;
}

/********************************************************************
* Logic by which computer player makes a tic-tac-toe move.         *
* param board 9-element integer array representing game board.     *
* return index (0 through 8) of computer's move or 9 if board full *
********************************************************************/
int computerMove(int board[])
{
	// Examine all rows.
	if (goodMove(board, 0, 1, 2))      return 2;
	else if (goodMove(board, 0, 2, 1)) return 1;
	else if (goodMove(board, 1, 2, 0)) return 0;
	else if (goodMove(board, 3, 4, 5)) return 5;
	else if (goodMove(board, 3, 5, 4)) return 4;
	else if (goodMove(board, 4, 5, 3)) return 3;
	else if (goodMove(board, 6, 7, 8)) return 8;
	else if (goodMove(board, 6, 8, 7)) return 7;
	else if (goodMove(board, 7, 8, 6)) return 6;

	// Examine all columns.
	else if (goodMove(board, 0, 3, 6)) return 6;
	else if (goodMove(board, 0, 6, 3)) return 3;
	else if (goodMove(board, 3, 6, 0)) return 0;
	else if (goodMove(board, 1, 4, 7)) return 7;
	else if (goodMove(board, 1, 7, 4)) return 4;
	else if (goodMove(board, 4, 7, 1)) return 1;
	else if (goodMove(board, 2, 5, 8)) return 8;
	else if (goodMove(board, 2, 8, 5)) return 5;
	else if (goodMove(board, 5, 8, 2)) return 2;

	// Examine diagonals.
	else if (goodMove(board, 0, 4, 8)) return 8;
	else if (goodMove(board, 4, 8, 0)) return 0;
	else if (goodMove(board, 0, 8, 4)) return 4;
	else if (goodMove(board, 2, 4, 6)) return 6;
	else if (goodMove(board, 4, 6, 2)) return 2;
	else if (goodMove(board, 2, 6, 4)) return 4;

	// Finally just pick a spot.
	else if (board[4] == 0) return 4;
	else if (board[0] == 0) return 0;
	else if (board[2] == 0) return 2;
	else if (board[6] == 0) return 6;
	else if (board[8] == 0) return 8;
	else if (board[1] == 0) return 1;
	else if (board[3] == 0) return 3;
	else if (board[5] == 0) return 5;
	else if (board[7] == 0) return 7;

	else return 9;                                // no legal move
}

/****************************************************************
* Print tic-tac-toe game board.                                *
* param board 9-element integer array representing game board. *
****************************************************************/
void printBoard(int board[])
{
	for (int i = 0; i < 9; i++) {
		if (board[i] == 1) cout << " X ";
		else if (board[i] == 2) cout << " O ";
		else cout << "   ";
		if (i < 8) {
			if (i % 3 == 2) cout << "\n---|---|---" << endl;
			else cout << "|";
		}
		else cout << endl << endl;
	}
}
