// ACADEMIC INTEGRITY PLEDGE
//
// - I have not used source code obtained from another student nor
//   any other unauthorized source, either modified or unmodified.
//
// - All source code and documentation used in my program is either
//   my original work or was derived by me from the source code
//   published in the textbook for this course or presented in
//   class.
//
// - I have not discussed coding details about this project with
//   anyone other than my instructor. I understand that I may discuss
//   the concepts of this program with other students and that another
//   student may help me debug my program so long as neither of us
//   writes anything during the discussion or modifies any computer
//   file during the discussion.
//
// - I have violated neither the spirit nor letter of these restrictions.
//
//
//
// Signed:_____________________________________ Date:_____________

// 3460:426 Lab 1 - Basic C shell

/* Basic shell */

/*
 * This is a very minimal shell. It finds an executable in the
 * PATH, then loads it and executes it (using execv). Since
 * it uses "." (dot) as a separator, it cannot handle file
 * names like "minishell.h"
 *
 * The focus on this exercise is to use fork, PATH variables,
 * and execv. 
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_ARGS	64
#define MAX_ARG_LEN	16
#define MAX_LINE_LEN	80
#define WHITESPACE	" ,\t\n"

struct command_t {
   	char *name;
   	int argc;
   	char *argv[MAX_ARGS];
};

/* Function prototypes */
int parseCommand(char *, struct command_t *);
void printPrompt();
void readCommand(char *);
void PrintHelp();

int main(int argc, char *argv[]) {
   	int pid;
   	int status;
	int ls = 0;
   	char cmdLine[MAX_LINE_LEN];
	char *args[1];
	args[0] = '\0';
   	struct command_t command;

   	/* Shell initialization */
   	while (1) {
      		printPrompt();
      		/* Read the command line and parse it */
      		readCommand(cmdLine);
      		parseCommand(cmdLine, &command);
      		command.argv[command.argc] = NULL;
      		/* Create a child process to execute the command */
      		if ((pid = fork()) == 0) {
			if(strcmp(command.name,"cls") == 0){
				execvp("clear", args);
			}
			else if(strcmp(command.name,"copy") == 0)
				execvp("cp", command.argv);
			else if(strcmp(command.name,"del") == 0)
				execvp("rm", command.argv);
			else if(strcmp(command.name,"make") == 0)
				execvp("nano", command.argv);
			else if(strcmp(command.name,"run") == 0)
				execvp(command.argv[1], command.argv);
			else if(strcmp(command.name,"type") == 0)
				execvp("more", command.argv);
			else if(strcmp(command.name,"dir") == 0){
				execvp("pwd", command.argv);
				execvp("ls -l", command.argv);
        		}
			else if(strcmp(command.name,"exit") == 0){
				break;
        		}
			else if(strcmp(command.name,"echo") == 0){
				execvp("echo", command.argv);
        		}
			else if(strcmp(command.name,"help") == 0){
				PrintHelp();
        		}
			else
				printf("Unrecognized command, type help for a list of commands\n");
      		}
      		/* Wait for the child to terminate */
      		wait(&status);
   	}

   	/* Shell termination */
   	printf("\n\n shell: Terminating successfully\n");
	exit(0);
   	return 0;
}

/* End basic shell */

/* Parse Command function */

/* Determine command name and construct the parameter list.
 * This function will build argv[] and set the argc value.
 * argc is the number of "tokens" or words on the command line
 * argv[] is an array of strings (pointers to char *). The last
 * element in argv[] must be NULL. As we scan the command line
 * from the left, the first token goes in argv[0], the second in
 * argv[1], and so on. Each time we add a token to argv[],
 * we increment argc.
 */
int parseCommand(char *cLine, struct command_t *cmd) {
	int argc;
	char **clPtr;
   	/* Initialization */
   	clPtr = &cLine;	/* cLine is the command line */
   	argc = 0;
   	cmd->argv[argc] = (char *) malloc(MAX_ARG_LEN);
   	/* Fill argv[] */
   	while ((cmd->argv[argc] = strsep(clPtr, WHITESPACE)) != NULL) {
      		cmd->argv[++argc] = (char *) malloc(MAX_ARG_LEN);
   	}
	cmd->argv[++argc] = (char *) malloc(MAX_ARG_LEN);
	cmd->argv[argc] = '\0';

   	/* Set the command name and argc */
   	cmd->argc = argc-1;
   	cmd->name = (char *) malloc(sizeof(cmd->argv[0]));
   	strcpy(cmd->name, cmd->argv[0]);
	return 1;
}

/* End parseCommand function */

/* Print prompt and read command functions - pp. 79-80 */

void printPrompt() {
   	/* Build the prompt string to have the machine name,
    	* current directory, or other desired information
    	*/
   	char * promptString = "linux_mjc118|>";
   	printf("%s ", promptString);
}

void readCommand(char *buffer) {
   	/* This code uses any set of I/O functions, such as those in
    	* the stdio library to read the entire command line into
    	* the buffer. This implementation is greatly simplified,
    	* but it does the job.
    	*/
   	gets(buffer);
}

void PrintHelp(){
	printf("\nList of Commands:\n");
	printf("cls: Clears the screen\n");
	printf("copy file1 file2: Creates file2 and copies contents of file1 to it\n");
	printf("del file: Deletes the named file\n");
	printf("echo comment: Displays comment on screen\n");
	printf("exit: Quits the Shell\n");
	printf("make file: Creates named text file in text editor\n");
	printf("run program: Executes named program\n");
	printf("type file: Displays the contents of named file on screen\n\n");
}

/* End printPrompt and readCommand */
