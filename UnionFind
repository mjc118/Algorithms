#include <iostream>
#include <random>
#include <string>
#include <map>
#include <vector>

using namespace std;

//(row * size) + col
int main(){
	vector<int> list, temp;
	map<int, vector<int>>MyMap;
	bool left, up, Possible = false;
	int Size, SizeSquared;
	double Probability;

	/*MyMap.insert(pair<int, vector<int>>(111, list));
	MyMap[111].push_back(111);
	temp = MyMap.find(111)->second;
	MyMap.erase(111);*/
	cin >> Size;
	cin >> Probability;

	SizeSquared = (Size * Size);

	int** Maze = new int*[Size];
	for (int i = 0; i < Size; ++i)
		Maze[i] = new int[Size];

	vector<int>ScoreGrid;
	
	for (int i = 0; i < (SizeSquared); ++i)
		ScoreGrid.push_back(0);

	for (int i = 0; i < Size; ++i){
		for (int j = 0; j < Size; ++j){
			if (((double)rand() / (RAND_MAX)) <= Probability)
				Maze[i][j] = 1;//open
			else
				Maze[i][j] = 0;//closed
		}
	}
	for (int i = 0; i < Size; ++i){
		for (int j = 0; j < Size; ++j){
			cout << Maze[i][j] << " ";
		}
		cout << endl;
	}

	for (int i = 0; i < Size; ++i){
		for (int j = 0; j < Size; ++j){
			left = up = false;
			if ((j - 1) >= 0){
				if (Maze[i][j - 1] == Maze[i][j]){
					MyMap.find(ScoreGrid[(i * Size) + (j - 1) ])->second.push_back((i * Size) + j );
					ScoreGrid[(i * Size) + j] = ScoreGrid[(i * Size) + (j - 1)];
					left = true;
				}
			}
			if ((i - 1) >= 0){
				if (Maze[i - 1][j] == Maze[i][j]){
					if (left){
						if (ScoreGrid[((i - 1) * Size) + j] != ScoreGrid[(i * Size) + j]){
							temp = MyMap.find(ScoreGrid[((i - 1) * Size) + j])->second;
							MyMap.erase(ScoreGrid[((i - 1) * Size) + j]);
							for (int it = 0 ; it < temp.size(); ++it){
								MyMap.find(ScoreGrid[(i * Size) + j])->second.push_back(temp[it]);
								ScoreGrid[temp[it]] = ScoreGrid[(i * Size) + j];
							}
						}
					}
					else{
						MyMap.find(ScoreGrid[((i - 1) * Size) + j])->second.push_back((i * Size) + j);
						ScoreGrid[(i * Size) + j] = ScoreGrid[((i - 1) * Size) + j];
					}
					up = true;
				}
			}
			if (!up && !left){
				MyMap.insert(pair<int, vector<int>>((i * Size) + j, list));
				MyMap[(i * Size) + j].push_back((i * Size) + j);
				ScoreGrid[((i * Size) + j)] = ((i * Size) + j);
			}
		}
	}

	for (int i = (SizeSquared)-Size; i < (SizeSquared); ++i){
		if (ScoreGrid[i] < Size)
			Possible = true;
	}
	cout << "Possible: " << Possible;
	cout << "Clusters: " << MyMap.size();

	ScoreGrid.erase(ScoreGrid.begin(),ScoreGrid.end());
	delete [] Maze;
	return 0;
}
