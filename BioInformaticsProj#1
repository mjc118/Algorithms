import random
import numpy

def main():
    DNAsequence = ""
    DNAcomplement = ""
    GeneSequence = ""
    ComplementGeneSequence = ""
    DNAbases = ['A', 'T', 'G', 'C']
    BaseComplements = {'A':'T', 'T':'A', 'G':'C', 'C':'G'}

    #print("Specify the desired length of the randomly generated DNA sequence")
    DNAlength = 2000

    #generate our initial strand
    for i in range(DNAlength):
        DNAsequence = DNAsequence + DNAbases[random.randint(0,3)]
    
    #generate our complement strand
    for i in range(DNAlength):
        DNAcomplement = DNAcomplement + BaseComplements[DNAsequence[i]]
    
    #Find our initial strands primer
    StartPrimer = random.randint(0, len(DNAsequence) - 200)
    DNAprimer = DNAsequence[StartPrimer:StartPrimer + 10]
    #Checks to make sure the primer found is unique, if not, add a character to it and check again till a unique one is found
    incr = 1
    while True:
        if DNAsequence.count(DNAprimer) != 1:
            DNAprimer = DNAsequence[StartPrimer:StartPrimer + 10 + incr]
            incr = incr + 1
        else:
            break

    #specify our gene sequence based on the primer's position
    DNAGeneSequence = DNAsequence[StartPrimer:StartPrimer + 200]
    
    #Find our complement strands primer
    DNAcomplement = DNAcomplement[::-1]#reverses string(done so primer ends up on correct end
    ComplementStartPrimer = DNAlength - StartPrimer - 200
    ComplementDNAPrimer = DNAcomplement[ComplementStartPrimer: ComplementStartPrimer + 10]
    #Checks to make sure the primer found is unique, if not, add a character to it and check again till a unique one is found
    incr = 1
    while True:
        if DNAcomplement.count(ComplementDNAPrimer) != 1:
            ComplementDNAPrimer = DNAcomplement[ComplementStartPrimer:ComplementStartPrimer + 10 + incr]
            incr = incr + 1
        else:
            break

    #specify ouru complement gene sequence based on it's primer's position
    ComplementGeneSequence = DNAcomplement[ComplementStartPrimer:ComplementStartPrimer + 200]
 
    #start our list with our starting strands length
    StrandList = [2000,2000]
    FailureChance = .00025
    #we start out with 2 DNA strands, if the enzyme successfully copies past the gene sequence
    #we will increment the number of strands we have to that we use the successful copy in
    #the next cycle
    DNAStrands = 2
    DNAfragments = 0
    Successes = 0
    Failures = 0
    PCRCycles = 10
    temp = 0
    #numpy.random.geometric returns a list, hence appending index 0 of 'StrandLength'
    #We must use a temp value to keep track of successes within our loop otherwise loop could be continuous
    #since we don't want to increment the number of strands we have while we are iterating over them.
    for i in range(PCRCycles):
        DNAStrands = DNAStrands + temp
        temp = 0
        for j in range(DNAStrands):
            StrandLength = numpy.random.geometric(FailureChance,1)
            if(StrandLength[0] >= StrandList[j]):
                StrandList.append(StrandList[j])
                temp = temp + 1
                Successes = Successes + 1
                if(StrandList[j] < 2000):
                    DNAfragments = DNAfragments + 1
            elif(StrandLength[0] >= 200):
                StrandList.append(StrandLength[0])
                temp = temp + 1
                DNAfragments = DNAfragments + 1
                Successes = Successes + 1
            else:
                StrandList.append(StrandLength[0])
                DNAfragments = DNAfragments + 1
                Failures = Failures + 1
        #raise our failure chance for the next cycle
        FailureChance = FailureChance + .00001
    
    StrandList = sorted(StrandList)
    file = open('DNA.txt','w')
    file.write(', '.join(map(str, StrandList)))
    file.write('\n')
    file.write("DNAStrands(Total # Failures + Successes): ")
    file.write(str(Failures + Successes))
    file.write('\n')
    file.write("DNAfragments (length < 2000): ")
    file.write(str(DNAfragments))
    file.write('\n')
    file.write("Failures (length < 200): ")
    file.write(str(Failures))
    file.write('\n')
    file.write("Successes (Successful copies throughout entire process) (length >= 200): ")
    file.write(str(Successes))
    
    return

if __name__ == "__main__":
    main()
