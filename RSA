import random
import math
import sys

def main():
    while True:
        print("input space seperated parameters, ALL ON ONE LINE, based on the project grading outline")    
        parameters = list(map(str,input().split(" ")))

        parameterlength = len(parameters)
        #needed so we dont' try to convert a word to an int, which throws an error
        if(parameters[0] == 'e'):
            parameterlength = parameterlength - 1
        #needed because you can not convert a letter to an int(issue with inputs containing 'e', 'd')
        for i in range(parameterlength):
            if(parameters[i] != 'e' and parameters[i] != 'd'):
                parameters[i] = int(parameters[i])

        #undoing previous operation so pseudo switch statement works correctly
        if(parameters[0] == 'e'):
            parameterlength = parameterlength + 1

        if(parameterlength == 1):
            print("PrimeNumber: ", RandomP(parameters[0]))
        elif(parameterlength == 2):
            gcdList = egcd(parameters[0], parameters[1])
            print("x: ", gcdList[1], "y: ", gcdList[2])
        elif(parameterlength == 3):
            PhiN = (parameters[1] - 1) * (parameters[2] - 1)
            n = parameters[1] * parameters[2]
            print("d: ", modinv(parameters[0], PhiN), "n: ", n)
        elif(parameterlength == 4):
            if(parameters[0] == 'e'):
                print("Encrypted message: ", RSAencrypt(parameters[1], parameters[2], parameters[3]))
            elif(parameters[0] == 'd'):
                MSGlist = RSAdecrypt(parameters[1], parameters[2], parameters[3])
                sys.stdout.write("Decrypted message: ")
                for i in MSGlist:
                    sys.stdout.write(i)
                print("")
            else:
                print("Invalid parameters")
        else:
            print("Invalid parameters")

        print("Press 'Y' to attempt more tests, else push any key to quit")
        Continue = input()
        Continue = Continue.upper()
        if(Continue != 'Y'):
            break

    return

#Python implementation of Euclidean Extended Algorithm to find GCD
def egcd(a, b):
    if a == 0:
        return(b, 0, 1)
    else:
        g, y , x = egcd(b % a, a)
        return(g, x - (b // a) * y, y)

#Python implementation of Modular Multiplicative Inverse
def modinv(a, m):
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None
    else:
        return x % m

#Python implementation of Fermat's Theorem
def Fermat(Prime):
    a = random.randint(2, Prime - 1)
    if pow(a, Prime - 1, Prime) == 1:
        return True
    else:
        return False

#choses a random odd number between given range and tests if it is prime using Fermat's Theorem
#(the number must pass Fermat's Test 5 times successively)
def RandomP(LengthPrime):
    while True:
        Prime = random.randrange(pow(10,LengthPrime - 1) + 1, pow(10,LengthPrime), 2)
        TestsPassed = 0
        for i in range(5):
            if(Fermat(Prime)):
                TestsPassed += 1
            else:
                break
            if TestsPassed >= 5:
              return Prime
 
#encrypts our message using method discussed in class
def RSAencrypt(e, n, message):
    EncrypM = ord(message[0])
    for i in range(len(message) - 1):
        EncrypM = 128 * EncrypM + ord(message[i + 1])
    
    EncrypM = pow(EncrypM, e, n)
    return EncrypM     

#decrypts our message using method discussed in class
def RSAdecrypt(d, n, message):
    message = pow(message, d, n)
    CharList = []

    while True:
        CharList.append(chr(message % 128))
        message = int(message / 128)
        if(message < 1):
            break

    CharList.reverse()
    return CharList

if __name__ == "__main__":
    main()
