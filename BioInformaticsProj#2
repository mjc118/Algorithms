import sys

#gaps on bottom strand are delete, top strand gaps are insertions
#make a dictionary of amino acids formed by 3 bases, step by 3's
#make sure to not go out of bounds when grabbing three characters
#del Global[:] - clears all elements 
StrandNames = []
GeneNames = ["NP", "VP35", "VP40", "GP", "2nd GP protein", "VP30", "VP24", "L"]
#load our strand names used to access the files + output
for i in range(40,119):
    if(i < 100):
        StrandNames.append("KM2330" + str(i))
    else:
        StrandNames.append("KM233" + str(i))
#variables to keep track of our stats
Insertions = 0
Deletions = 0
SynonMutate = 0
NonsynonMutate = 0

#used during alignment
MatchScore = 0

#Holds our 1976 gene sequences
Zaire = []
Sudan = []
GeneStrand = [] #temp variable to hold our 8 genes per strand
OutputFile = open('Output.txt', 'w')

def main():
    ReadFromFile("Zaire1976",Zaire)
    ReadFromFile("Sudan1976",Sudan)
    #get rid of 3rd GP gene that we are not using in our alignment since Sudan ebola does not have it
    del Zaire[5]
    for i in range(len(StrandNames)):
        ReadFromFile(StrandNames[i], GeneStrand)
        del GeneStrand[5] #same reason as Zaire del
        OutputFile.write("Zaire\t" + StrandNames[i] + "\tInsertions\tDeletions\tSynonymous Mutations\tNonsynonymous Mutations\n")
        for j in range(8):
            Insertions = Deletions = SynonMutate = NonsynonMutate = 0
            Seq1 = "_" + Zaire[j]
            Seq2 = "_" + GeneStrand[j]
            #create our 2d array for alignment scoring
            Global = [[0 for j in range(len(Seq1))] for i in range(len(Seq2))]
            #score the array based on our two sequences
            GlobalAlignment(Global, Seq1, Seq2)
            GlobalMax = [Global[len(Seq2) - 1][len(Seq1) - 1], len(Seq2) - 1, len(Seq1) - 1]
            #grab our new alignment strings based on our scoring and traversing our array backwards
            TopAlign, BotAlign = Alignment(GlobalMax, Seq1, Seq2, Global)
            Insertions = TopAlign.count('_')
            Deletions = BotAlign.count('_')
    
def Alignment(LocalMax, Seq1, Seq2, Global):
    AlignedTop = ""
    AlignedBot = ""
    MatchScore = 0
    Match = True
    TookDiagonal = False

    CurrentPos = [LocalMax[1], LocalMax[2]]
    NextPos = [CurrentPos[0] - 1, CurrentPos[1] - 1]
    CurrentScore = LocalMax[0]

    while True:
        if(NextPos[0] < 0 and NextPos[1] < 0):
            break
        elif(NextPos[0] < 0 and NextPos[1] >= 0):
            AlignedTop += Seq1[CurrentPos[1]]
            AlignedBot += "_"
            CurrentPos[0] = 0
            CurrentPos[1] = CurrentPos[1] - 1
        elif(NextPos[1] < 0 and NextPos[0] >= 0):
            AlignedTop += "_"
            AlignedBot += Seq2[CurrentPos[0]]
            CurrentPos[0] = CurrentPos[0] - 1
            CurrentPos[1] = 0
        else:
            if(NextPos[0] >= 0 and NextPos[1] >= 0):
                if(Seq1[CurrentPos[1]] == Seq2[CurrentPos[0]]):
                    MatchScore = CurrentScore - 1 #match
                    Match = True
                else:
                    MatchScore = CurrentScore + 1 #mismatch
                    Match = False
            
                if(Global[NextPos[0]][NextPos[1]] == MatchScore):
                    if(((Seq1[CurrentPos[1]] == Seq2[CurrentPos[0]]) and Match) or ((Seq1[CurrentPos[1]] != Seq2[CurrentPos[0]]) and not Match)):
                        AlignedTop += Seq1[CurrentPos[1]]
                        AlignedBot += Seq2[CurrentPos[0]]
                        CurrentPos[0] = CurrentPos[0] - 1
                        CurrentPos[1] = CurrentPos[1] - 1
                        CurrentScore = Global[CurrentPos[0]][CurrentPos[1]]
                        TookDiagonal = True
                if(not TookDiagonal):
                    if(Global[CurrentPos[0] - 1][CurrentPos[1]] == CurrentScore + 2):
                        AlignedTop += "_"
                        AlignedBot += Seq2[CurrentPos[0]]
                        CurrentPos[0] = CurrentPos[0] - 1
                        CurrentScore = Global[CurrentPos[0]][CurrentPos[1]]
                    elif(Global[CurrentPos[0]][CurrentPos[1] - 1] == CurrentScore + 2):
                        AlignedTop += Seq1[CurrentPos[1]]
                        AlignedBot += "_"
                        CurrentPos[1] = CurrentPos[1] - 1
                        CurrentScore = Global[CurrentPos[0]][CurrentPos[1]]
                
        NextPos[0] = CurrentPos[0] - 1
        NextPos[1] = CurrentPos[1] - 1
        TookDiagonal = False

    AlignedTop = AlignedTop[::-1]
    AlignedBot = AlignedBot[::-1]

    return AlignedTop, AlignedBot

def GlobalAlignment(Global, Seq1, Seq2):
    Row = len(Seq2)
    Column = len(Seq1)
    for i in range(Row):
        Global[i][0] = i * -2
    for j in range(Column):
        Global[0][j] = j * -2

    for i in range(1,Row):
        for j in range(1,Column):
            if(Seq1[j] == Seq2[i]):
                MatchScore = 1
            else:
                MatchScore = -1
            Global[i][j] = max(MatchScore + Global[i - 1][j - 1] ,max(-2 + Global[i][j - 1], -2 + Global[i - 1][j]))

def ReadFromFile(FileName, CDSarray):
    index = -1
    with open("CDS/" + FileName + ".txt", "rtU") as file:
        for line in file:
            if(line[0] == '>'):
                index += 1
                CDSarray.append("")
            else:
                CDSarray[index] += line.rstrip()

#dictionary used to check what type of mutation we have
RNA_codon_table = {
# Second Base
# U C A G
# U
    'UUU': 'Phe', 'UCU': 'Ser', 'UAU': 'Tyr', 'UGU': 'Cys', # UxU
    'UUC': 'Phe', 'UCC': 'Ser', 'UAC': 'Tyr', 'UGC': 'Cys', # UxC
    'UUA': 'Leu', 'UCA': 'Ser', 'UAA': '---', 'UGA': '---', # UxA
    'UUG': 'Leu', 'UCG': 'Ser', 'UAG': '---', 'UGG': 'Trp', # UxG
# C
    'CUU': 'Leu', 'CCU': 'Pro', 'CAU': 'His', 'CGU': 'Arg', # CxU
    'CUC': 'Leu', 'CCC': 'Pro', 'CAC': 'His', 'CGC': 'Arg', # CxC
    'CUA': 'Leu', 'CCA': 'Pro', 'CAA': 'Gln', 'CGA': 'Arg', # CxA
    'CUG': 'Leu', 'CCG': 'Pro', 'CAG': 'Gln', 'CGG': 'Arg', # CxG
# A
    'AUU': 'Ile', 'ACU': 'Thr', 'AAU': 'Asn', 'AGU': 'Ser', # AxU
    'AUC': 'Ile', 'ACC': 'Thr', 'AAC': 'Asn', 'AGC': 'Ser', # AxC
    'AUA': 'Ile', 'ACA': 'Thr', 'AAA': 'Lys', 'AGA': 'Arg', # AxA
    'AUG': 'Met', 'ACG': 'Thr', 'AAG': 'Lys', 'AGG': 'Arg', # AxG
# G
    'GUU': 'Val', 'GCU': 'Ala', 'GAU': 'Asp', 'GGU': 'Gly', # GxU
    'GUC': 'Val', 'GCC': 'Ala', 'GAC': 'Asp', 'GGC': 'Gly', # GxC
    'GUA': 'Val', 'GCA': 'Ala', 'GAA': 'Glu', 'GGA': 'Gly', # GxA
    'GUG': 'Val', 'GCG': 'Ala', 'GAG': 'Glu', 'GGG': 'Gly'  # GxG
}

if True:
    main()
