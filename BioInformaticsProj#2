import sys

#gaps on bottom strand are delete, top strand gaps are insertions
#make a dictionary of amino acids formed by 3 bases, step by 3's
#make sure to not go out of bounds when grabbing three characters
#del Global[:] - clears all elements 
StrandNames = []
GeneNames = ["NP", "VP35", "VP40", "GP", "2nd GP protein", "VP30", "VP24", "L"]
#load our strand names used to access the files + output
for i in range(40,119):
    if(i < 100):
        StrandNames.append("KM2330" + str(i))
    else:
        StrandNames.append("KM233" + str(i))
#variables to keep track of our stats

#Holds our 1976 gene sequences
Zaire = []
Sudan = []
GeneStrand = [] #temp variable to hold our 8 genes per strand
OutputFile = open('Output.txt', 'w')

def main():
    ReadFromFile("Zaire1976",Zaire)
    ReadFromFile("Sudan1976",Sudan)
    #get rid of 3rd GP gene that we are not using in our alignment since Sudan ebola does not have it
    del Zaire[5]
    for n in range(len(StrandNames)):
        ReadFromFile(StrandNames[n], GeneStrand)
        del GeneStrand[5] #same reason as Zaire del
        OutputFile.write("Zaire\t" + StrandNames[n] + "\tInsertions\tDeletions\tSynonymous Mutations\tNonsynonymous Mutations\n")
        for m in range(8):
            print(m)
            Insertions = Deletions = SynonMutate = NonsynonMutate = 0
            print(len(Zaire[m])," ", len(GeneStrand[m]))
            TopAlign, BotAlign = SplitAlign(Zaire[m], GeneStrand[m])
            print(TopAlign, "\n\n", BotAlign)
            Insertions = TopAlign.count('_')
            Deletions = BotAlign.count('_')
            SynonMutate, NonsynonMutate = Mutations(TopAlign, BotAlign)
            OutputFile.write("\t" + GeneNames[m] + "\t" + str(Insertions) + "\t" + str(Deletions) + "\t" + str(SynonMutate) + "\t" + str(NonsynonMutate) + "\n")
    
    OutputFile.close()


def SplitAlign(TopSeq, BotSeq):
    TopLen = len(TopSeq)
    BotLen = len(BotSeq)
    #the variables we will return
    TopAligned = ""
    BotAligned = ""
    Index = 0
    TopEnd = BotEnd = False
    while(True):
        TopPortion = "_"
        BotPortion = "_"
        if(TopLen - Index >= 200):
            TopPortion += TopSeq[Index:Index + 200]
        elif(TopLen - Index > 0):
            TopPortion += TopSeq[Index:TopLen]
            TopEnd = True
        else:
            TopEnd = True

        if(BotLen - Index >= 200):
            BotPortion += BotSeq[Index:Index + 200]
        elif(BotLen - Index > 0):
            BotPortion += BotSeq[Index:BotLen]
            BotEnd = True
        else:
            BotEnd = True

        Global = [[0 for Col in range(len(TopPortion))] for Row in range(len(BotPortion))]
        #score the array based on our two sequences
        GlobalAlignment(Global, TopPortion, BotPortion)
        GlobalMax = [Global[len(BotPortion) - 1][len(TopPortion) - 1], len(BotPortion) - 1, len(TopPortion) - 1]
        #grab our new alignment strings based on our scoring and traversing our array backwards
        TempTopAlign, TempBotAlign = Alignment(GlobalMax, TopPortion, BotPortion, Global)

        #start constructing our end aligned string
        TopAligned += TempTopAlign
        BotAligned += TempBotAlign

        #free our memory, incr index
        del Global[:]
        Index += 200
        if(TopEnd and BotEnd):
            break

    return TopAligned, BotAligned



#calculate our what type of mutations we have
def Mutations(OldEbola, NewEbola):
    SynonMutate = NonsynonMutate = 0
    OldFrame = NewFrame = ""
    for i in range(0,len(OldEbola),3):
        if(i <= len(OldEbola) - 3):
            OldFrame = OldEbola[i:i + 3]
            NewFrame = NewEbola[i:i + 3]
            if(OldFrame.count('_') == 0 and NewFrame.count('_') == 0):
                if(RNA_codon_table[OldFrame] == RNA_codon_table[NewFrame]):
                    SynonMutate += 1
                else:
                    NonsynonMutate += 1

    return SynonMutate, NonsynonMutate
  
def Alignment(LocalMax, Seq1, Seq2, Global):
    AlignedTop = ""
    AlignedBot = ""
    MatchScore = 0
    Match = True
    TookDiagonal = False

    CurrentPos = [LocalMax[1], LocalMax[2]]
    NextPos = [CurrentPos[0] - 1, CurrentPos[1] - 1]
    CurrentScore = LocalMax[0]

    while True:
        if(NextPos[0] < 0 and NextPos[1] < 0):
            break
        elif(NextPos[0] < 0 and NextPos[1] >= 0):
            AlignedTop += Seq1[CurrentPos[1]]
            AlignedBot += "_"
            CurrentPos[0] = 0
            CurrentPos[1] = CurrentPos[1] - 1
        elif(NextPos[1] < 0 and NextPos[0] >= 0):
            AlignedTop += "_"
            AlignedBot += Seq2[CurrentPos[0]]
            CurrentPos[0] = CurrentPos[0] - 1
            CurrentPos[1] = 0
        else:
            if(NextPos[0] >= 0 and NextPos[1] >= 0):
                if(Seq1[CurrentPos[1]] == Seq2[CurrentPos[0]]):
                    MatchScore = CurrentScore - 1 #match
                    Match = True
                else:
                    MatchScore = CurrentScore + 1 #mismatch
                    Match = False
            
                if(Global[NextPos[0]][NextPos[1]] == MatchScore):
                    if(((Seq1[CurrentPos[1]] == Seq2[CurrentPos[0]]) and Match) or ((Seq1[CurrentPos[1]] != Seq2[CurrentPos[0]]) and not Match)):
                        AlignedTop += Seq1[CurrentPos[1]]
                        AlignedBot += Seq2[CurrentPos[0]]
                        CurrentPos[0] = CurrentPos[0] - 1
                        CurrentPos[1] = CurrentPos[1] - 1
                        CurrentScore = Global[CurrentPos[0]][CurrentPos[1]]
                        TookDiagonal = True
                if(not TookDiagonal):
                    if(Global[CurrentPos[0] - 1][CurrentPos[1]] == CurrentScore + 2):
                        AlignedTop += "_"
                        AlignedBot += Seq2[CurrentPos[0]]
                        CurrentPos[0] = CurrentPos[0] - 1
                        CurrentScore = Global[CurrentPos[0]][CurrentPos[1]]
                    elif(Global[CurrentPos[0]][CurrentPos[1] - 1] == CurrentScore + 2):
                        AlignedTop += Seq1[CurrentPos[1]]
                        AlignedBot += "_"
                        CurrentPos[1] = CurrentPos[1] - 1
                        CurrentScore = Global[CurrentPos[0]][CurrentPos[1]]
                
        NextPos[0] = CurrentPos[0] - 1
        NextPos[1] = CurrentPos[1] - 1
        TookDiagonal = False

    AlignedTop = AlignedTop[::-1]
    AlignedBot = AlignedBot[::-1]

    return AlignedTop, AlignedBot

def GlobalAlignment(Global, Seq1, Seq2):
    Row = len(Seq2)
    Column = len(Seq1)
    for i in range(Row):
        Global[i][0] = i * -2
    for j in range(Column):
        Global[0][j] = j * -2

    for i in range(1,Row):
        for j in range(1,Column):
            if(Seq1[j] == Seq2[i]):
                MatchScore = 1
            else:
                MatchScore = -1
            Global[i][j] = max(MatchScore + Global[i - 1][j - 1] ,max(-2 + Global[i][j - 1], -2 + Global[i - 1][j]))

def ReadFromFile(FileName, CDSarray):
    index = -1
    with open("CDS/" + FileName + ".txt", "rtU") as file:
        for line in file:
            if(line[0] == '>'):
                index += 1
                CDSarray.append("")
            else:
                CDSarray[index] += line.rstrip()

#dictionary used to check what type of mutation we have
RNA_codon_table = {
# Second Base
# U C A G
# U
    'TTT': 'Phe', 'TCT': 'Ser', 'TAT': 'Tyr', 'TGT': 'Cys', # UxU
    'TTC': 'Phe', 'TCC': 'Ser', 'TAC': 'Tyr', 'TGC': 'Cys', # UxC
    'TTA': 'Leu', 'TCA': 'Ser', 'TAA': '---', 'TGA': '---', # UxA
    'TTG': 'Leu', 'TCG': 'Ser', 'TAG': '---', 'TGG': 'Trp', # UxG
# C
    'CTT': 'Leu', 'CCT': 'Pro', 'CAT': 'His', 'CGT': 'Arg', # CxU
    'CTC': 'Leu', 'CCC': 'Pro', 'CAC': 'His', 'CGC': 'Arg', # CxC
    'CTA': 'Leu', 'CCA': 'Pro', 'CAA': 'Gln', 'CGA': 'Arg', # CxA
    'CTG': 'Leu', 'CCG': 'Pro', 'CAG': 'Gln', 'CGG': 'Arg', # CxG
# A
    'ATT': 'Ile', 'ACT': 'Thr', 'AAT': 'Asn', 'AGT': 'Ser', # AxU
    'ATC': 'Ile', 'ACC': 'Thr', 'AAC': 'Asn', 'AGC': 'Ser', # AxC
    'ATA': 'Ile', 'ACA': 'Thr', 'AAA': 'Lys', 'AGA': 'Arg', # AxA
    'ATG': 'Met', 'ACG': 'Thr', 'AAG': 'Lys', 'AGG': 'Arg', # AxG
# G
    'GTT': 'Val', 'GCT': 'Ala', 'GAT': 'Asp', 'GGT': 'Gly', # GxU
    'GTC': 'Val', 'GCC': 'Ala', 'GAC': 'Asp', 'GGC': 'Gly', # GxC
    'GTA': 'Val', 'GCA': 'Ala', 'GAA': 'Glu', 'GGA': 'Gly', # GxA
    'GTG': 'Val', 'GCG': 'Ala', 'GAG': 'Glu', 'GGG': 'Gly'  # GxG
}

if True:
    main()
