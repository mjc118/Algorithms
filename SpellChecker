#include <iostream>
#include <fstream>
#include <algorithm>
#include <string>
#include <locale>
#include <functional>
#include <sstream>
#include <vector>
#include <set>

using namespace std;

struct CorrectSpelling;

bool SpellCheckWord(set<string> & Dict, int(&AlignArr)[40][40]);
void SpellCheckDocument(set<string> & Dict, int(&AlignArr)[40][40]);
void FindWords(vector<CorrectSpelling> & Words, string UserInput, set<string> & Dict, int(&AlignArr)[40][40]);
int AlignWords(string UserInput, string DictInput, int(&AlignArr)[40][40]);
void SortWords(vector <CorrectSpelling>& Words);
void LoadLetterScoreGrid();
void Strip(string &Str);

struct CorrectSpelling{
	string word;
	int score;

	CorrectSpelling() :word(""), score(0){};
	CorrectSpelling(string w, int s) :word(w), score(s){};
};

//Global Letter Scoring Grid
const int maxRows = 26;
const int maxCols = 26;
int LetterMatchScore[maxRows][maxCols];

int main(){
	int AlignmentArray[40][40];
	set<string> Dictionary;
	ifstream input("en_US_processed.dic");
	string line;
	int Choice;
	bool Continue = true, WriteBack = false;

	cout << "Please wait while the Dictionary is populated.\n\n";
	while (getline(input, line)){
		Dictionary.insert(line);
	}
	input.close();

	//load in our specific letter scoring
	LoadLetterScoreGrid();


	while (Continue){
		cout << "\t Spell Checker\n" << "-------------------------\n";
		cout << "1) Spell Check Single Words\n" << "2) Spell Check an entire text document\n";
		cout << "3) Exit Program\n" << "-------------------------\n\n";
		if (cin >> Choice){
			switch (Choice){
			case 1: {
						if (SpellCheckWord(Dictionary, AlignmentArray)){ WriteBack = true; }
						break;
			}
			case 2: {
						SpellCheckDocument(Dictionary, AlignmentArray);
						break;
			}
			case 3:{
					   Continue = false;
					   break;
			}
			default:{
						cout << "Please select a proper option from the menu\n";
						break;
			}
			}
		}
		else{
			cout << "Improper Input Detected!\n";
			cin.clear();
			cin.ignore(100, '\n');
		}
	}

	if (WriteBack){//if a word was inserted into our dictionary
		ofstream output("en_US_processed.dic");
		for (auto i : Dictionary){
			output << i << endl;
		}
		output.close();
	}

	return 0;
}

bool SpellCheckWord(set<string> &Dict, int(&AlignArr)[40][40]){
	vector <CorrectSpelling> WordVector(5);
	string Input = "";
	char Choice;
	bool Inserted_Word = false;

	while (true){
		cout << "\nInput a word to be spell checked, or 'leave' to exit\n";
		cin >> Input;

		if (Input == "leave")
			break;

		if (Dict.find(Input) != Dict.end()){
			cout << "Spelled Correctly\n";
		}
		else{
			cout << "That word was spelled incorrectly...\n" << "Did you mean ...\n";
			FindWords(WordVector, Input, Dict, AlignArr);
			for (int i = 4; i >= 0; --i){
				cout << WordVector[i].word << endl;
			}
			cout << "Or would you like to add that word to the Dictionary?(Y/N)\n";
			cin >> Choice;
			if (toupper(Choice) == 'Y'){
				Dict.insert(Input);
				cout << "Your word was successfully added!\n";
				Inserted_Word = true;
			}
		}

	}

	return Inserted_Word;
}

void SpellCheckDocument(set<string> &Dict, int(&AlignArr)[40][40]){
	vector<CorrectSpelling> WordVector(5);
	vector< vector<string> > MisspelledWords;
	vector< string > temp;//used to push back an empty vector
	vector< vector<CorrectSpelling> > PossibleSpellings;
	int WhichLine = 0;
	string FileName, line, Word;
	ifstream InputFile;
	ofstream OutputFile;
	cout << "Input the name of the text file to be spell checked\n";
	cin >> FileName;

	InputFile.open(FileName);

	if (InputFile.is_open()){
		cout << "Please wait while your file is processed, this may take a bit...\n";
		OutputFile.open(FileName.erase(FileName.size() - 4) + "_processed.txt");
		while (getline(InputFile, line)){
			stringstream strStream(line);
			MisspelledWords.push_back(temp);
			while (strStream >> Word){
				OutputFile << Word << " ";
				if (!(Dict.find(Word) != Dict.end())){
					Strip(Word);//strip punctuation out of a word
					FindWords(WordVector, Word, Dict, AlignArr);
					PossibleSpellings.push_back(WordVector);
					MisspelledWords[WhichLine].push_back(Word);
				}
			}
			OutputFile << endl;
			++WhichLine;
		}

		WhichLine = 0;//keeps track of which struct of correct spellings we are on
		for (int i = 0; i < MisspelledWords.size(); ++i){
			string TempString = to_string(i + 1);//which line of text the misspelled word came from
			if (MisspelledWords[i].size() > 0){//if we have no misspelled words on a line print nothing
				OutputFile << "\nLine " << TempString << " had the following Words Misspelled\n";
			}
			for (int j = 0; j < MisspelledWords[i].size(); ++j){
				OutputFile << MisspelledWords[i][j] << ": Was misspelled, here are some possible correct spellings\n";
				for (int m = 4; m >= 0; --m){
					OutputFile << "\t" << PossibleSpellings[WhichLine][m].word << endl;
				}
				++WhichLine;
			}
		}
		MisspelledWords.erase(MisspelledWords.begin(), MisspelledWords.end());
		PossibleSpellings.erase(PossibleSpellings.begin(), PossibleSpellings.end());
		cout << "File processing complete!\n\n";
		OutputFile.close();
	}
	else{
		cout << "Specified file failed to open or does not exist...\nReturning to Main Menu\n";
		return;
	}
}

void FindWords(vector <CorrectSpelling>& Words, string UserInput, set<string> & Dict, int(&AlignArr)[40][40]){
	int numWords = 0, temp = 0;

	for (auto iter = Dict.begin(); iter != Dict.end(); ++iter){
		temp = AlignWords(UserInput, *iter, AlignArr);
		if (numWords != 5){
			Words[numWords].word = *iter;
			Words[numWords].score = temp;
			++numWords;
			if (numWords == 5){//sort our array once we are full
				SortWords(Words);
			}
		}
		else if (temp > Words[0].score){
			Words[0].word = *iter;
			Words[0].score = temp;
			SortWords(Words);//sort our array if we ever add a word
		}
	}

}

int AlignWords(string UserInput, string DictInput, int(&AlignArr)[40][40]){
	UserInput = "_" + UserInput;
	DictInput = "_" + DictInput;
	int UserLength = UserInput.length();
	int DictLength = DictInput.length();
	int MatchScore;
	//match: +1, mismatch: -1, gap: -4

	//set our initial row
	for (int i = 0; i < UserLength; ++i){
		AlignArr[0][i] = i * -4;
	}

	//set our initial column
	for (int i = 0; i < DictLength; ++i){
		AlignArr[i][0] = i * -4;
	}

	int i, j;

	for (i = 1; i < DictLength; ++i){
		for (j = 1; j < UserLength; ++j){
			if (ispunct(DictInput[i]) || isdigit(DictInput[i]) || ispunct(UserInput[j]) || isdigit(UserInput[j])){
				MatchScore = -4;//our character is a punctuation mark
			}
			else{
				MatchScore = LetterMatchScore[tolower(DictInput[i]) - 97][tolower(UserInput[j]) - 97];
			}
			AlignArr[i][j] = max(MatchScore + AlignArr[i - 1][j - 1], max(-4 + AlignArr[i - 1][j], -4 + AlignArr[i][j - 1]));
		}
	}

	return AlignArr[i - 1][j - 1];
}

void SortWords(vector <CorrectSpelling>& Words){
	CorrectSpelling temp;
	int i, j;
	for (i = 1; i < 5; ++i){
		temp = Words[i];
		j = i;
		while (j > 0 && Words[j - 1].score > temp.score){
			Words[j] = Words[j - 1];
			--j;
		}
		Words[j] = temp;
	}
}

void LoadLetterScoreGrid(){
	ifstream Input("LetterGrid.txt");
	string line;
	int Row = 0;

	while (getline(Input, line)){
		//istringstream(integer converting string stream)
		istringstream stream(line);

		for (int i = 0; i < 26; ++i){
			stream >> LetterMatchScore[Row][i];
		}
		++Row;
	}

	Input.close();
}

void Strip(string &Str){
	string result;
	result.reserve(Str.length());

	remove_copy_if(Str.begin(), Str.end(), back_inserter(result), ptr_fun<int, int>(ispunct));

	Str = result;
}
