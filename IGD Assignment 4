#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <random>
#include <glut.h>

//Function Prototypes
void display();
void specialKeys();
void keyPressed();
void idle();
void MakeRobotBodyPart();
void DrawPlane();

//Global Variables
float RGBColor[] = { 0.6, 0.6, 0.6 };//gray by default

/* for blinking */
float Y_eye_Scale = 0.4;
float BlinkRate = -0.0005;
bool Blink = false;

/* for jumping */
float JumpHeightLimit = 0.5;//limit of our jump before we will descend
float CurrentJumpDistance = 0;
float JumpRate = 0.0005;
bool Jump = false;

/* for Waving */
//Complete Waves Consist of rotating all the way back to 225 and then to 180
float CurrentWaveDegree = 0;
float RotationIncrement = 0.1;
int CurrentNumberOfCompleteWaves = 0;
bool Wave = false;
bool Towards225 = true;//if we are incrementing towards degree 225 don't invert our increment 
//when initially passing our forward wave limit of 145 degrees

/* for Running */
float CurrentRunDegree = 0;
float RunRotationIncrement = 0.1;
int CurrentNumberofLegMotions = 0;
bool Run = false;
bool Towards45 = true;

/* for Turning Around */
float CurrentTurnDegree = 0;//180 is when we stop
float OverallDegreesTurned = 0;//keep track of how many degrees we've fully turned (multiple times turning)
bool TurnAround = false;


struct vec3{
	GLdouble x;
	GLdouble y;
	GLdouble z;
};
vec3 rotation;

GLfloat ambient_light[] = { 0.0, 0.0, 0.0, 1.0 };
GLfloat diffusiveLight[] = { 0.1, 0.1, 0.1, 1.0 };
GLfloat specularLight[] = { 0.1, 0.1, 0.1, 1.0 };
GLfloat materialShininess[] = { 0.0 };

GLfloat light_position[] = { 2.0, 5.0, 5.0, 0.0 };

GLfloat mat_ambient[] = { 0.7, 0.7, 0.7, 1.0 };
GLfloat mat_diffuse[] = { 0.8, 0.8, 0.8, 1.0 };
GLfloat mat_specular[] = { 0.9, 0.9, 0.9, 1.0 };


void MakeRobotBodyPart(){
	//Multi-colored side - FRONT
	//glBegin declares to start drawing a polygon with all points
	//that are listed between glBegin and glEnd

	//glColor3f declares that every vertex after the declaration
	//will be of that color (RGB)

	//set the color for the rest of our sides to gray
	glColor3f(RGBColor[0], RGBColor[1], RGBColor[2]);

	//FRONT
	glBegin(GL_POLYGON);
	glVertex3f(0.5, -0.5, -0.5);	glVertex3f(0.5, 0.5, -0.5);		glVertex3f(-0.5, 0.5, -0.5);  	glVertex3f(-0.5, -0.5, -0.5);
	glEnd();

	//BACK
	glBegin(GL_POLYGON);
	glVertex3f(0.5, -0.5, 0.5);		glVertex3f(0.5, 0.5, 0.5);		glVertex3f(-0.5, 0.5, 0.5);		glVertex3f(-0.5, -0.5, 0.5);
	glEnd();

	//RIGHT
	glBegin(GL_POLYGON);
	glVertex3f(0.5, -0.5, -0.5);	glVertex3f(0.5, 0.5, -0.5);		glVertex3f(0.5, 0.5, 0.5);		glVertex3f(0.5, -0.5, 0.5);
	glEnd();

	//LEFT
	glBegin(GL_POLYGON);
	glVertex3f(-0.5, -0.5, 0.5);	glVertex3f(-0.5, 0.5, 0.5);		glVertex3f(-0.5, 0.5, -0.5);	glVertex3f(-0.5, -0.5, -0.5);
	glEnd();

	//TOP
	glBegin(GL_POLYGON);
	glVertex3f(0.5, 0.5, 0.5);		glVertex3f(0.5, 0.5, -0.5);		glVertex3f(-0.5, 0.5, -0.5);	glVertex3f(-0.5, 0.5, 0.5);
	glEnd();

	//BOTTOM
	glBegin(GL_POLYGON);
	glVertex3f(0.5, -0.5, -0.5);	glVertex3f(0.5, -0.5, 0.5);		glVertex3f(-0.5, -0.5, 0.5);	glVertex3f(-0.5, -0.5, -0.5);
	glEnd();

	//setup for drawing lines
	glLineWidth(2);
	glColor3f(0, 0, 0);//black

	//vertical lines along the sides of the cube
	glBegin(GL_LINES);
	glVertex3f(0.5, -0.5, -0.5);	glVertex3f(0.5, 0.5, -0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(0.5, -0.5, 0.5);	glVertex3f(0.5, 0.5, 0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(-0.5, -0.5, 0.5);	glVertex3f(-0.5, 0.5, 0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(-0.5, -0.5, -0.5);	glVertex3f(-0.5, 0.5, -0.5);
	glEnd();

	//horizontal lines around the top of the cube
	glBegin(GL_LINES);
	glVertex3f(0.5, 0.5, -0.5);	glVertex3f(0.5, 0.5, 0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(0.5, 0.5, 0.5);	glVertex3f(-0.5, 0.5, 0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(-0.5, 0.5, 0.5);	glVertex3f(-0.5, 0.5, -0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(-0.5, 0.5, -0.5);	glVertex3f(0.5, 0.5, -0.5);
	glEnd();

	//horizontal lines around the bottom of the cube
	glBegin(GL_LINES);
	glVertex3f(0.5, -0.5, -0.5);	glVertex3f(0.5, -0.5, 0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(0.5, -0.5, 0.5);	glVertex3f(-0.5, -0.5, 0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(-0.5, -0.5, 0.5);	glVertex3f(-0.5, -0.5, -0.5);
	glEnd();

	glBegin(GL_LINES);
	glVertex3f(-0.5, -0.5, -0.5);	glVertex3f(0.5, -0.5, -0.5);
	glEnd();
}

void DrawPlane(){
	glColor3f(1, 0, 0);//red

	glBegin(GL_POLYGON);
	glVertex3f(0.2, 0.25, -0.5);	glVertex3f(0.2, 0.4, -0.5);		glVertex3f(0.1, 0.4, -0.5);	glVertex3f(0.1, 0.25, -0.5);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex3f(-0.2, 0.25, -0.5);	glVertex3f(-0.2, 0.4, -0.5);		glVertex3f(-0.1, 0.4, -0.5);	glVertex3f(-0.1, 0.25, -0.5);
	glEnd();
}

void display(){

	//Clear screen and Z-buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glShadeModel(GL_SMOOTH);
	//glShadeModel(GL_FLAT);
	//glEnable(GL_LIGHT0);

	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LESS);


	glEnable(GL_LIGHT0);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHTING);
	glEnable(GL_NORMALIZE);


	glLightfv(GL_LIGHT0, GL_AMBIENT, ambient_light);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffusiveLight);
	glLightfv(GL_LIGHT0, GL_SPECULAR, specularLight);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, materialShininess);

	// Reset transformations
	glLoadIdentity();

	//use this length so that camera is 1 unit away fro origin
	double dist = sqrt(1 / 100.0);

	gluLookAt(dist / 10, -dist / 10, -dist / 10,  /* position of camera */
		0.0, 0.0, 0.0,   /* where camera is pointing at */
		0.0, 1.0, 0.0);  /* which direction is up */

	// Other Transformations
	glTranslatef(0.1, 0.0, 0.0);
	glRotatef(180, 0.0, 1.0, 0.0);

	// Rotate when user changes rotate_x and rotate_y
	glRotatef(rotation.x, 1.0, 0.0, 0.0);
	glRotatef(rotation.y, 0.0, 1.0, 0.0);
	glRotatef(rotation.z, 0.0, 0.0, 1.0);
	// Other Transformations
	//glScalef( 2.0, 2.0, 0.0 );

	if (Jump){
		CurrentJumpDistance += JumpRate;

		//once we've hit our limit or have reached our original position invert our rate and stop the loop
		if (CurrentJumpDistance <= 0 || CurrentJumpDistance >= JumpHeightLimit){ JumpRate *= -1; }
		if (CurrentJumpDistance <= 0){ Jump = false; }
		glutPostRedisplay();
	}
	if (TurnAround){
		CurrentTurnDegree += 0.1;
		OverallDegreesTurned += 0.1;
		if (OverallDegreesTurned > 361){ OverallDegreesTurned = 0; }
		if (CurrentTurnDegree >= 180){ CurrentTurnDegree = 0; TurnAround = false; }

		glutPostRedisplay();
	}
	//Body
	glPushMatrix();
	glRotatef(OverallDegreesTurned, 0, 1, 0);
	glTranslatef(0, 0 + CurrentJumpDistance, 0);
	glScalef(0.8, 1.2, 0.6);
	MakeRobotBodyPart();
	glPopMatrix();

	//Head
	glPushMatrix();
	glColor3f(RGBColor[0], RGBColor[1], RGBColor[2]);
	glRotatef(OverallDegreesTurned, 0, 1, 0);
	glTranslatef(0, 0.81 + CurrentJumpDistance, 0);
	glScalef(0.5, 0.4, 0.5);
	glutSolidSphere(0.55, 30, 30);
	//MakeRobotBodyPart();
	glPopMatrix();

	if (Blink){

		Y_eye_Scale += BlinkRate;
		//if we've hit zero or we've finished our blink we need to invert our rate
		if (Y_eye_Scale <= 0 || Y_eye_Scale >= 0.4){ BlinkRate *= -1; }
		if (Y_eye_Scale >= 0.4){ Blink = false; }
		glutPostRedisplay();
	}
	//Eyes
	glPushMatrix();
	glRotatef(OverallDegreesTurned, 0, 1, 0);
	glTranslatef(0, 0.75 + CurrentJumpDistance + ((.4 - Y_eye_Scale) / 4), 0.09);
	glScalef(0.7, Y_eye_Scale, 0.7);
	DrawPlane();
	glPopMatrix();

	//Right Arm
	glPushMatrix();
	glRotatef(OverallDegreesTurned, 0, 1, 0);
	glTranslatef(-0.51, 0 + CurrentJumpDistance, 0);
	if (Wave){
		if (CurrentWaveDegree >= 225){ RotationIncrement *= -1; Towards225 = false; }
		else if (!Towards225 && CurrentWaveDegree <= 145 && CurrentNumberOfCompleteWaves < 6){
			++CurrentNumberOfCompleteWaves;
			Towards225 = true;
			RotationIncrement *= -1;
		}

		CurrentWaveDegree += RotationIncrement;

		glTranslatef(0, 0.45, -0.0);
		glRotatef(CurrentWaveDegree, 1.0, 0.0, 0.0);
		glTranslatef(0, -0.45, 0.0);

		if (CurrentWaveDegree <= 0){ Wave = false; RotationIncrement = 0.1; Towards225 = true; CurrentNumberOfCompleteWaves = 0; }
		glutPostRedisplay();
	}
	glScalef(0.2, 1, 0.2);
	MakeRobotBodyPart();
	glPopMatrix();

	//Left Arm
	glPushMatrix();
	glRotatef(OverallDegreesTurned, 0, 1, 0);
	glTranslatef(0.51, 0 + CurrentJumpDistance, 0);
	glScalef(0.2, 1, 0.2);
	MakeRobotBodyPart();
	glPopMatrix();

	//Right Leg
	glPushMatrix();
	glRotatef(OverallDegreesTurned, 0, 1, 0);
	glTranslatef(-0.25, -1.1 + CurrentJumpDistance, 0);

	if (Run){
		if (CurrentRunDegree >= 45){ RunRotationIncrement *= -1; Towards45 = false; }
		else if (!Towards45 && CurrentRunDegree <= -45){
			++CurrentNumberofLegMotions;
			Towards45 = true;
			RunRotationIncrement *= -1;
		}

		CurrentRunDegree += RunRotationIncrement;

		glTranslatef(0, 0.45, -0.0);
		glRotatef(CurrentRunDegree, 1.0, 0.0, 0.0);
		glTranslatef(0, -0.45, 0.0);

		if (CurrentRunDegree > -0.1 && CurrentRunDegree < 0.1 && CurrentNumberofLegMotions > 6){
			Run = false;
			RunRotationIncrement = 0.1;
			Towards45 = true;
			CurrentNumberofLegMotions = 0;
		}
		glutPostRedisplay();
	}

	glScalef(0.2, 1.2, 0.2);
	MakeRobotBodyPart();
	glPopMatrix();

	//Left Leg
	glPushMatrix();
	glRotatef(OverallDegreesTurned, 0, 1, 0);
	glTranslatef(0.25, -1.1 + CurrentJumpDistance, 0);

	glTranslatef(0, 0.45, -0.0);
	glRotatef(CurrentRunDegree * -1, 1.0, 0.0, 0.0);
	glTranslatef(0, -0.45, 0.0);

	glScalef(0.2, 1.2, 0.2);
	MakeRobotBodyPart();
	glPopMatrix();

	glFlush();
	glutSwapBuffers();

	/*glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);*/
}

void specialKeys(int key, int x, int y){
	//  Right arrow - increase rotation by 5 degree
	if (key == GLUT_KEY_RIGHT)
		rotation.y += 5;

	//  Left arrow - decrease rotation by 5 degree
	else if (key == GLUT_KEY_LEFT)
		rotation.y -= 5;

	else if (key == GLUT_KEY_UP)
		rotation.x += 5;

	else if (key == GLUT_KEY_DOWN)
		rotation.x -= 5;

	//  Request display update
	glutPostRedisplay();
}

void keyPressed(unsigned char key, int x, int y){
	if (key == 'z')
		rotation.z += 5;
	else if (key == 'c'){
		for (int i = 0; i < 3; ++i)
			RGBColor[i] = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
	}
	else if (key == 'b')
		Blink = true;
	else if (key == 'j')
		Jump = true;
	else if (key == 'w')
		Wave = true;
	else if (key == 'r')
		Run = true;
	else if (key == 't')
		TurnAround = true;
	else if (key == 'd'){
		if (diffusiveLight[0] + 0.1 > 1){
			for (int i = 0; i < 3; ++i){
				diffusiveLight[i] = 0;
				//mat_diffuse[i] = 0;
			}
		}
		else{
			for (int i = 0; i < 3; ++i){
				diffusiveLight[i] += 0.1;
				//mat_diffuse[i] += 0.1;
			}
		}
		std::cout << diffusiveLight[0] << std::endl;
	}
	else if (key == 's'){
		if (specularLight[0] + 0.1 > 1){
			for (int i = 0; i < 3; ++i){
				specularLight[i] = 0;
				//mat_specular[i] = 0;
			}
		}
		else{
			for (int i = 0; i < 3; ++i){
				specularLight[i] += 0.1;
				//mat_specular[i] += 0.1;
			}
		}
		std::cout << specularLight[0] << std::endl;
	}
	else if (key == 'h'){
		materialShininess[0] += 10;
		if (materialShininess[0] > 100)materialShininess[0] = 0;
		std::cout << materialShininess[0] << std::endl;
	}
	else if (key == 'q')
		exit(0);
	glutPostRedisplay();
}

void idle(){
	rotation.y += 0.05;
	glutPostRedisplay();
}

int main(int argc, char* argv[]){
	srand(time(NULL));//seed random number generation for random colors
	//Initialize GLUT and process user parameters
	glutInit(&argc, argv);
	glutInitWindowSize(480, 480);

	//Request double buffered true color window with Z-buffer
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

	//Create Window
	glutCreateWindow("Awesome Cube");

	//Callback functions
	glutDisplayFunc(display);
	glutSpecialFunc(specialKeys);
	glutKeyboardFunc(keyPressed);
	//glutIdleFunc(idle);

	//glClearColor(1, 1, 1, 1);
	//Enable Z-buffer depth test
	glCullFace(GL_BACK);

	/*glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LESS);


	glEnable(GL_LIGHT0);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHTING);
	glEnable(GL_NORMALIZE);
	

	glLightfv(GL_LIGHT0, GL_AMBIENT, ambient_light);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffusiveLight);
	glLightfv(GL_LIGHT0, GL_SPECULAR, specularLight);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, materialShininess);
	*/
	//Pass control to GLUT for events
	glutMainLoop();

	return 0;
}
