/* Includes */

#include <unistd.h> /* Symbolic Constants */
#include <sys/types.h> /* Primitive System Data Types */ 
#include <errno.h> /* Errors */
#include <stdio.h> /* Input/Output */
#include <stdlib.h> /* General Utilities */
#include <pthread.h> /* POSIX Threads */
#include <string.h> /* String handling */
#include <semaphore.h> /* Semaphore */

/* prototype for thread routine */

void handler ( void *ptr );
void AgentOne(void *ptr);
void AgentTwo(void *ptr);
void AgentThree(void *ptr);
void TobaccoPusher();
void MatchPusher();
void PaperPusher();
void SmokerHasTobacco(void *ptr);
void SmokerHasMatch(void *ptr);
void SmokerHasPaper(void *ptr);

/* global vars */

/* semaphores are declared global so they can be accessed 
 in main() and in thread routine,
 here, the semaphore is used as a mutex */
sem_t tobaccoSem;
sem_t paperSem;
sem_t agentSem;
sem_t matchSem;
sem_t mutex;
sem_t tobacco;
sem_t match;
sem_t paper;

int counter; /* shared variable */
int isTobacco = 1, isPaper = 1, isMatch = 1;

int main(){
	int i[2];
 	pthread_t thread_a;
 	pthread_t thread_b;
 
 	i[0] = 0; /* argument to threads */
 	i[1] = 1;
 
	sem_init(&tobacco,  0, 0);
	sem_init(&match, 0, 0);
	sem_init(&paper, 0, 0);
 	sem_init(&mutex, 0, 1); /* initialize mutex to 1 - binary semaphore */
 	/* second param = 0 - semaphore is local */
 
 	/* Note: you can check if thread has been successfully created by checking return value of
 	pthread_create */ 
 	pthread_create (&thread_a, NULL, (void *) &handler, (void *) &i[0]);
 	pthread_create (&thread_b, NULL, (void *) &handler, (void *) &i[1]);
 
 	pthread_join(thread_a, NULL);
 	pthread_join(thread_b, NULL);
 	sem_destroy(&mutex); /* destroy semaphore */
 
 	exit(0); /* exit */ 
} /* main() */

void handler ( void *ptr ){
 	int x; 
 	x = *((int *) ptr);
 	printf("Thread %d: Waiting to enter critical region...\n", x);
 	sem_wait(&mutex); /* P() semaphore */
 	/* START CRITICAL REGION */
 	printf("Thread %d: Now in critical region...\n", x);
 	printf("Thread %d: Counter Value: %d\n", x, counter);
 	printf("Thread %d: Incrementing Counter...\n", x);
 	counter++;
 	printf("Thread %d: New Counter Value: %d\n", x, counter);
 	printf("Thread %d: Exiting critical region...\n", x);
 	/* END CRITICAL REGION */ 
 	sem_post(&mutex); /* V() semaphore */
 
	pthread_exit(0); /* exit thread */
}

void AgentOne(void *ptr){
	int i;
	i = 0;
	while(i < 6){
		sem_wait(&agentSem);
		sem_post(&tobacco);
		sem_post(&paper);
		++i;	
	}
}

void AgentTwo(void *ptr){
	int i;
	i = 0;
	while(i < 6){
		sem_wait(&agentSem);
		sem_post(&paper);
		sem_post(&match);	
	}
}

void AgentThree(void *ptr){
	int i;
	i = 0;
	while(i < 6){
		sem_wait(&agentSem);
		sem_post(&tobacco);
		sem_post(&match);	
	}
}

void TobaccoPusher(){
	sem_wait(&tobacco);
	sem_wait(&mutex);
	
	if(isPaper){
		isPaper = 0;
		sem_post(&matchSem);
	}
	else if(isMatch){
		isMatch = 0;
		sem_post(&paperSem);	
	}
	else{
		isTobacco = 1;
	}
	sem_post(&mutex);
}

void MatchPusher(){
	sem_wait(&match);
	sem_wait(&mutex);
	
	if(isTobacco){
		isTobacco = 0;
		sem_post(&paperSem);
	}
	else if(isPaper){
		isPaper = 0;
		sem_post(&tobaccoSem);	
	}
	else{
		isMatch = 1;
	}
	sem_post(&mutex);
}

void PaperPusher(){
	sem_wait(&paper);
	sem_wait(&mutex);
	
	if(isMatch){
		isMatch = 0;
		sem_post(&matchSem);
	}
	else if(isTobacco){
		isTobacco = 0;
		sem_post(&tobaccoSem);	
	}
	else{
		isPaper = 1;
	}
	sem_post(&mutex);
}

void SmokerHasTobacco(void *ptr){
	int x; 
 	x = *((int *) ptr);

	sem_wait(&tobaccoSem);
	printf("Thread %d: Tobacco Making Cigarette...\n", x);
	sem_post(&agentSem);
	printf("Thread %d: Tobacco Smoking Cigarette...\n", x);
}

void SmokerHasMatch(void *ptr){
	int x; 
 	x = *((int *) ptr);

	sem_wait(&matchSem);
	printf("Thread %d: Match Making Cigarette...\n", x);
	sem_post(&agentSem);
	printf("Thread %d: Match Smoking Cigarette...\n", x);
}

void SmokerHasPaper(void *ptr){
	int x; 
 	x = *((int *) ptr);

	sem_wait(&paperSem);
	printf("Thread %d: Paper Making Cigarette...\n", x);
	sem_post(&agentSem);
	printf("Thread %d: Paper Smoking Cigarette...\n", x);
}
